### Description

Dive into the thrilling world of Battle Royale with the PUBG Finish Placement Prediction competition! In this Kaggle challenge, you will analyze over 65,000 anonymized player data from PlayerUnknown's Battlegrounds (PUBG), one of the most popular games with over 50 million copies sold. Your task is to predict players' final placements based on their in-game statistics and initial ratings. 

As players are dropped onto an island, they must scavenge for resources and eliminate opponents while the play zone shrinks. Will you uncover the best strategies to secure victory? Use the provided data to let the numbers guide your predictions!

### Evaluation

Submissions are evaluated on Mean Absolute Error between your predicted winPlacePerc and the observed winPlacePerc.

## Submission File

For each Id in the test set, you must predict their placement as a percentage (0 for last, 1 for first place) for the winPlacePerc variable. The file should contain a header and have the following format:

```
Id,winPlacePerc
  47734,0
  47735,0.5
  47736,0
  47737,1
  etc.
```

See sample_submission.csv on the data page for a full sample submission.

### Dataset Description

In a PUBG match, up to 100 players compete, either solo or in teams, with their performance ranked based on survival. The dataset includes anonymized game stats, where each row represents a player's post-game performance. Matches can vary in player count and team size, and your goal is to create a model that predicts players' finishing placements on a scale from 1 (first place) to 0 (last place).

## File descriptions

- train_V2.csv - the training set
- test_V2.csv - the test set
- sample_submission_V2.csv - a sample submission file in the correct format

## Data fields

- DBNOs -  Number of enemy players knocked.
- assists -  Number of enemy players this player damaged that were killed by teammates.
- boosts -  Number of boost items used.
- damageDealt -  Total damage dealt. Note: Self inflicted damage is subtracted.
- headshotKills - Number of enemy players killed with headshots.
- heals - Number of healing items used.
- Id - Player’s Id
- killPlace -  Ranking in match of number of enemy players killed.
- killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a “None”.
- killStreaks - Max number of enemy players killed in a short amount of time.
- kills - Number of enemy players killed.
- longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.
- matchDuration - Duration of match in seconds.
- matchId - ID to identify match. There are no matches that are in both the training and testing set.
- matchType - String identifying the game mode that the data comes from. The standard modes are “solo”, “duo”, “squad”, “solo-fpp”, “duo-fpp”, and “squad-fpp”; other modes are from events or custom matches.
- rankPoints - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API’s next version, so use with caution. Value of -1 takes place of “None”.
- revives - Number of times this player revived teammates.
- rideDistance - Total distance traveled in vehicles measured in meters.
- roadKills - Number of kills while in a vehicle.
- swimDistance - Total distance traveled by swimming measured in meters.
- teamKills - Number of times this player killed a teammate.
- vehicleDestroys - Number of vehicles destroyed.
- walkDistance - Total distance traveled on foot measured in meters.
- weaponsAcquired - Number of weapons picked up.
- winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a “None”.
- groupId - ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.
- numGroups - Number of groups we have data for in the match.
- maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.
- winPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.

### Other Important Information

Use of external data is encouraged in this competition, and you can publish your data as an Open Dataset for use in your Kernel. All submissions must be made through Kernels, and the competition has specific compute limits for training and prediction.